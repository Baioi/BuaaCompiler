.data:
	.s0:	.asciiz	" !#$%&'()*+,-./0123456789:;<=> @ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
	.s1:	.asciiz	""
	.s2:	.asciiz	"helloworld!"
	.s3:	.asciiz	"input a char and enter:"
	.s4:	.asciiz	"please input number counts:"
	.s5:	.asciiz	"_a is"
	.s6:	.asciiz	"_a is"
	.s7:	.asciiz	"_a is"
	.s8:	.asciiz	"_a is"
	.s9:	.asciiz	"_a is"
	.s10:	.asciiz	"if ok....perhaps"
	.s11:	.asciiz	"_a is"
	.s12:	.asciiz	""
cInt1:	.word	10
#Global const declare
cInt2:	.word	-1
#Global const declare
cInt3:	.word	0
#Global const declare
cMaxInt:	.word	2147483647
#Global const declare
cMinInt:	.word	-2147483648
#Global const declare
cmaxint:	.word	2147483647
#Global const declare
cChar0:	.word	95
#Global const declare
cChar1:	.word	97
#Global const declare
cChar2:	.word	65
#Global const declare
cChar3:	.word	43
#Global const declare
cChar4:	.word	42
#Global const declare
cChar5:	.word	48
#Global const declare
_:	.word	0
	#Global var declare
_9:	.word	0
	#Global var declare
__:	.word	0
	#Global var declare
_a:	.word	0
	#Global var declare
a1:	.word	0
	#Global var declare
_A:	.word	0
	#Global var declare
a2:	.word	0
	#Global var declare
a3:	.space	40
#Global var declare
a4:	.space	4
#Global var declare
a5:	.word	0
	#Global var declare
A2:	.space	4
#Global var declare
A3:	.space	80
#Global var declare
A4:	.word	0
	#Global var declare
.text:
j main
PrintHelloWorld:
addiu	$sp	$sp	-256
sw	$ra	252($sp)
sw	$fp	248($sp)
addiu	$t0	$sp	-8
add	$fp	$t0	$0
sw	$s0	244($sp)
sw	$s1	240($sp)
sw	$s2	236($sp)
sw	$s3	232($sp)
sw	$s4	228($sp)
sw	$s5	224($sp)
sw	$s6	220($sp)
sw	$s7	216($sp)
#Function declare
#load
li	$t0	233
add	$t1	$0	$t0
#save
sw	$t1	212($sp)
#Assign
li	$v0	4
la	$a0	.s0
syscall
#Write String
li	$v0	4
la	$a0	.s1
syscall
#Write String
li	$v0	4
la	$a0	.s2
syscall
#Write String
#load
li	$t0	42
li	$v0	11
add	$a0	$t0	$0
syscall
#Write Integer
#load
lw	$t0	cChar0
li	$v0	11
add	$a0	$t0	$0
syscall
#Write Integer
#load
lw	$t0	cInt1
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
#load
lw	$t0	212($sp)
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#Return without values
addi	$v0	$0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#End
SquareSum:
addiu	$sp	$sp	-256
sw	$ra	252($sp)
sw	$fp	248($sp)
addiu	$t0	$sp	-8
add	$fp	$t0	$0
sw	$s0	244($sp)
sw	$s1	240($sp)
sw	$s2	236($sp)
sw	$s3	232($sp)
sw	$s4	228($sp)
sw	$s5	224($sp)
sw	$s6	220($sp)
sw	$s7	216($sp)
#Function declare
#load
lw	$t0	212($sp)
#load
li	$t1	-1
mul	$t2	$t0	$t1
#save
sw	$t2	200($sp)
#Mul
#load
lw	$t0	200($sp)
neg	$t1	$t0
#save
sw	$t1	196($sp)
#Neg
#load
lw	$t0	196($sp)
add	$t1	$0	$t0
#save
sw	$t1	204($sp)
#Assign
#load
lw	$t0	212($sp)
#load
li	$t1	0
mul	$t2	$t0	$t1
#save
sw	$t2	192($sp)
#Mul
#load
lw	$t0	192($sp)
add	$t1	$0	$t0
#save
sw	$t1	204($sp)
#Assign
#load
lw	$t0	212($sp)
#load
li	$t1	0
mul	$t2	$t0	$t1
#save
sw	$t2	188($sp)
#Mul
#load
lw	$t0	188($sp)
add	$t1	$0	$t0
#save
sw	$t1	204($sp)
#Assign
#load
lw	$t0	212($sp)
#load
lw	$t1	212($sp)
mul	$t2	$t0	$t1
#save
sw	$t2	184($sp)
#Mul
#load
lw	$t0	184($sp)
add	$t1	$0	$t0
#save
sw	$t1	204($sp)
#Assign
#load
lw	$t0	212($sp)
#load
lw	$t1	212($sp)
mul	$t2	$t0	$t1
#save
sw	$t2	180($sp)
#Mul
#load
lw	$t0	180($sp)
neg	$t1	$t0
#save
sw	$t1	176($sp)
#Neg
#load
lw	$t0	176($sp)
neg	$t1	$t0
#save
sw	$t1	172($sp)
#Neg
#load
lw	$t0	208($sp)
#load
lw	$t1	208($sp)
mul	$t2	$t0	$t1
#save
sw	$t2	168($sp)
#Mul
#load
lw	$t0	172($sp)
#load
lw	$t1	168($sp)
add	$t2	$t0	$t1
#save
sw	$t2	164($sp)
#Add
#load
lw	$t0	164($sp)
add	$t1	$0	$t0
#save
sw	$t1	204($sp)
#Assign
#load
lw	$t0	204($sp)
addi	$v0	$t0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#Return with values
addi	$v0	$0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#End
_myStop:
addiu	$sp	$sp	-256
sw	$ra	252($sp)
sw	$fp	248($sp)
addiu	$t0	$sp	-8
add	$fp	$t0	$0
sw	$s0	244($sp)
sw	$s1	240($sp)
sw	$s2	236($sp)
sw	$s3	232($sp)
sw	$s4	228($sp)
sw	$s5	224($sp)
sw	$s6	220($sp)
sw	$s7	216($sp)
#Function declare
li	$v0	4
la	$a0	.s3
syscall
#Write String
li	$v0	12
syscall
#save
sw	$v0	212($sp)
#Read
addi	$v0	$0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#End
NsquareSum:
addiu	$sp	$sp	-256
sw	$ra	252($sp)
sw	$fp	248($sp)
addiu	$t0	$sp	-8
add	$fp	$t0	$0
sw	$s0	244($sp)
sw	$s1	240($sp)
sw	$s2	236($sp)
sw	$s3	232($sp)
sw	$s4	228($sp)
sw	$s5	224($sp)
sw	$s6	220($sp)
sw	$s7	216($sp)
#Function declare
#load
lw	$t0	212($sp)
add	$t1	$0	$t0
#save
sw	$t1	164($sp)
#Assign
#load
lw	$t0	208($sp)
#load
li	$t1	1
seq	$t2	$t0	$t1
#save
sw	$t2	160($sp)
#Equ
#load
lw	$t0	160($sp)
beqz	$t0	.l0
#If not goto
#load
lw	$t0	212($sp)
addi	$v0	$t0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#Return with values
j	.l1
#Goto
.l0:
.l1:
#load
lw	$t0	212($sp)
sw	$t0	-44($sp)
#Push
#load
lw	$t0	208($sp)
#load
li	$t1	1
sub	$t2	$t0	$t1
#save
sw	$t2	152($sp)
#Sub
#load
lw	$t0	152($sp)
sw	$t0	-48($sp)
#Push
jal	NsquareSum
#Call
sw	$v0	144($sp)
#Move from function
#load
lw	$t0	164($sp)
#load
lw	$t1	144($sp)
mul	$t2	$t0	$t1
#save
sw	$t2	140($sp)
#Mul
#load
lw	$t0	140($sp)
add	$t1	$0	$t0
#save
sw	$t1	164($sp)
#Assign
#load
lw	$t0	164($sp)
addi	$v0	$t0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#Return with values
addi	$v0	$0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#End
NextAlphabet:
addiu	$sp	$sp	-256
sw	$ra	252($sp)
sw	$fp	248($sp)
addiu	$t0	$sp	-8
add	$fp	$t0	$0
sw	$s0	244($sp)
sw	$s1	240($sp)
sw	$s2	236($sp)
sw	$s3	232($sp)
sw	$s4	228($sp)
sw	$s5	224($sp)
sw	$s6	220($sp)
sw	$s7	216($sp)
#Function declare
#load
lw	$t0	212($sp)
#load
li	$t1	1
add	$t2	$t0	$t1
#save
sw	$t2	208($sp)
#Add
#load
lw	$t0	208($sp)
addi	$v0	$t0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#Return with values
addi	$v0	$0	0
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#End
main:
la	$ra	m_end
sw	$ra	252($sp)
sw	$fp	248($sp)
addiu	$t0	$sp	-8
add	$fp	$t0	$0
#Main Declare
jal	PrintHelloWorld
#Call
li	$v0	4
la	$a0	.s4
syscall
#Write String
li	$v0	5
syscall
#save
sw	$v0	212($sp)
#Read
#load
li	$t0	0
add	$t1	$0	$t0
#save
sw	$t1	184($sp)
#Assign
#load
li	$t0	666
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
#load
li	$t0	20
neg	$t1	$t0
#save
sw	$t1	172($sp)
#Neg
la	$t0	188($sp)
#load
li	$t1	0
#load
lw	$t2	172($sp)
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
sw	$t2	0($t3)
#Store to Array
la	$t0	188($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	168($sp)
#Load from array
#load
lw	$t0	168($sp)
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
la	$t0	200($sp)
#load
li	$t1	0
#load
li	$t2	97
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
sw	$t2	0($t3)
#Store to Array
la	$t0	200($sp)
#load
li	$t1	1
#load
li	$t2	98
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
sw	$t2	0($t3)
#Store to Array
la	$t0	200($sp)
#load
li	$t1	2
#load
li	$t2	99
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
sw	$t2	0($t3)
#Store to Array
la	$t0	200($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	164($sp)
#Load from array
#load
lw	$t0	164($sp)
sw	$t0	-44($sp)
#Push
jal	NextAlphabet
#Call
sw	$v0	156($sp)
#Move from function
#load
lw	$t0	156($sp)
li	$v0	11
add	$a0	$t0	$0
syscall
#Write Integer
la	$t0	188($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	152($sp)
#Load from array
#load
lw	$t0	_a
#load
lw	$t1	152($sp)
slt	$t2	$t1	$t0
#save
sw	$t2	148($sp)
#Bigger than
#load
lw	$t0	148($sp)
beqz	$t0	.l2
#If not goto
la	$t0	188($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	144($sp)
#Load from array
#load
lw	$t0	144($sp)
#load
li	$t1	1
sub	$t2	$t0	$t1
#save
sw	$t2	140($sp)
#Sub
#load
lw	$t0	140($sp)
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
j	.l3
#Goto
.l2:
.l3:
li	$v0	4
la	$a0	.s5
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
la	$t0	188($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	136($sp)
#Load from array
#load
lw	$t0	_a
#load
lw	$t1	136($sp)
slt	$t2	$t0	$t1
#save
sw	$t2	132($sp)
#Less than
#load
lw	$t0	132($sp)
beqz	$t0	.l4
#If not goto
#load
li	$t0	2
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
j	.l5
#Goto
.l4:
.l5:
li	$v0	4
la	$a0	.s6
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
#load
lw	$t0	_a
#load
li	$t1	2
seq	$t2	$t0	$t1
#save
sw	$t2	128($sp)
#Equ
#load
lw	$t0	128($sp)
beqz	$t0	.l6
#If not goto
la	$t0	188($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	124($sp)
#Load from array
#load
lw	$t0	124($sp)
#load
li	$t1	2
mul	$t2	$t0	$t1
#save
sw	$t2	120($sp)
#Mul
#load
lw	$t0	120($sp)
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
j	.l7
#Goto
.l6:
.l7:
li	$v0	4
la	$a0	.s7
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
la	$t0	188($sp)
#load
li	$t1	0
li	$t4	4
mul	$t1	$t1	$t4
sub	$t3	$t0	$t1
lw	$t2	0($t3)
#save
sw	$t2	116($sp)
#Load from array
#load
lw	$t0	_a
#load
lw	$t1	116($sp)
sne	$t2	$t0	$t1
#save
sw	$t2	112($sp)
#Not Equ
#load
lw	$t0	112($sp)
beqz	$t0	.l8
#If not goto
#load
li	$t0	4
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
j	.l9
#Goto
.l8:
.l9:
li	$v0	4
la	$a0	.s8
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
#load
lw	$t0	_a
#load
li	$t1	4
sge	$t2	$t0	$t1#save
sw	$t2	108($sp)
#No less than
#load
lw	$t0	108($sp)
beqz	$t0	.l10
#If not goto
#load
li	$t0	0
neg	$t1	$t0
#save
sw	$t1	104($sp)
#Neg
#load
lw	$t0	104($sp)
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
j	.l11
#Goto
.l10:
.l11:
li	$v0	4
la	$a0	.s9
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
#load
lw	$t0	_a
#load
li	$t1	0
sle	$t2	$t0	$t1#save
sw	$t2	100($sp)
#No bigger than
#load
lw	$t0	100($sp)
beqz	$t0	.l12
#If not goto
li	$v0	4
la	$a0	.s10
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
#load
li	$t0	666
add	$t1	$0	$t0
#save
sw	$t1	_a
#Assign
j	.l13
#Goto
.l12:
.l13:
li	$v0	4
la	$a0	.s11
syscall
#Write String
#load
lw	$t0	_a
li	$v0	1
add	$a0	$t0	$0
syscall
#Write int
jal	_myStop
#Call
#load
li	$t0	1
sw	$t0	-44($sp)
#Push
#load
li	$t0	1
sw	$t0	-48($sp)
#Push
jal	NsquareSum
#Call
sw	$v0	88($sp)
#Move from function
#load
lw	$t0	88($sp)
add	$t1	$0	$t0
#save
sw	$t1	184($sp)
#Assign
li	$v0	4
la	$a0	.s12
syscall
#Write String
#load
lw	$t0	208($sp)
#load
lw	$t1	204($sp)
add	$t2	$t0	$t1
#save
sw	$t2	84($sp)
#Add
#load
lw	$t0	84($sp)
add	$t1	$0	$t0
#save
sw	$t1	176($sp)
#Assign
#load
lw	$t0	208($sp)
#load
lw	$t1	204($sp)
add	$t2	$t0	$t1
#save
sw	$t2	80($sp)
#Add
#load
lw	$t0	80($sp)
add	$t1	$0	$t0
#save
sw	$t1	184($sp)
#Assign
#load
lw	$t0	208($sp)
add	$t1	$0	$t0
#save
sw	$t1	180($sp)
#Assign
#load
lw	$t0	180($sp)
#load
lw	$t1	204($sp)
add	$t2	$t0	$t1
#save
sw	$t2	76($sp)
#Add
#load
lw	$t0	76($sp)
add	$t1	$0	$t0
#save
sw	$t1	180($sp)
#Assign
jal	_myStop
#Call
lw	$ra	252($sp)
lw	$fp	248($sp)
addiu	$sp	$sp	256
jr	$ra
#Return without values
m_end:
